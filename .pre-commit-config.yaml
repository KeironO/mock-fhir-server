# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
repos:
  # General pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-docstring-first
      - id: check-case-conflict
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Ruff - Python linter and formatter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      # Run the linter
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      # Run the formatter
      - id: ruff-format

  # MyPy - Static type checker
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-PyYAML]
        # Only run on Python files in src/ and exclude tests by default
        files: ^src/.*\.py$
        # Alternatively, run on all Python files but exclude certain patterns:
        # exclude: ^(tests/|docs/)

  # Bandit - Security linter
  - repo: https://github.com/PyCQA/bandit
    rev: '1.7.5'
    hooks:
      - id: bandit
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']
        # Exclude test files and other non-production code
        exclude: ^tests/

  # Optional: Check for Python 2/3 compatibility issues
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # Optional: Sort imports
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort (python)
        args: [--profile, black, --line-length, "88"]

  # Optional: Additional security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

# Configuration for pre-commit
default_install_hook_types: [pre-commit, pre-push]
default_stages: [commit]

# You can also specify which hooks to run on push vs commit
repos:
  # Lighter checks on every commit
  - repo: local
    hooks:
      - id: ruff-check-fast
        name: ruff-check-fast
        entry: ruff check --fix-only
        language: system
        types: [python]
        stages: [commit]

# More thorough checks on push
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false